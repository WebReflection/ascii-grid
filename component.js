/*! (c) Andrea Giammarchi */
var t=t=>{const e=(t=>{let e,s=0;const o=/\S+/g,a=[],r=new Map([[".","."]]);for(const c of t.split(/[\r\n]+/)){const t=[];for(;e=o.exec(c);){const[o]=e;r.has(o)||r.set(o,"g"+s++),t.push(r.get(o))}t.length&&a.push(t)}return a})(t),s=e.flat().filter((t=>"."!==t));return t=e.map((t=>`"${t.join(" ")}"`)).join(" "),{applyTo(e){let o=0;const a=new Map,{children:r,style:c}=e;c.display="grid",c["grid-template-areas"]=t;for(const t of s)if(!a.has(t)){const e=r[o++];e.style["grid-area"]=t,a.set(t,e)}return e},cssFor(e){let o=0;const a=new Set,r=[`${e}{display:grid;grid-template-areas:${t}}`];for(const t of s)a.has(t)||(r.push(`${e}>*:nth-child(${++o}){grid-area:${t}}`),a.add(t));return r.join("\n")}}};if(!customElements.get("ascii-grid")){const{COMMENT_NODE:e,ELEMENT_NODE:s}=Node,{find:o}=Array.prototype,a=t=>t.nodeType===e&&t.data.startsWith("#"),r=new WeakMap,c=(t,e)=>{const s=new MutationObserver((()=>{o.call(t.childNodes,a)&&(s.disconnect(),r.delete(t),e.call(t,t))}));s.observe(t,{childList:!0}),r.set(t,s)};class n extends HTMLElement{#t;static observedAttributes=["cols","rows"];attributeChangedCallback(t,e,s){switch(t){case"cols":this.style["grid-template-columns"]=s;break;case"rows":this.style["grid-template-rows"]=s}}get structure(){const t=o.call(this.childNodes,a);return t?t.data.slice(1):""}set structure(e){let s=o.call(this.childNodes,a);s||(s=this.appendChild(document.createComment(""))),s.data="#"+e,t(e).applyTo(this)}connectedCallback(){const{structure:t}=this;t?this.structure=t:r.has(this)||c(this,this.connectedCallback)}}customElements.define("ascii-grid",n);const i=e=>{const s=o.call(e.childNodes,a);if(s){t(s.data.slice(1)).applyTo(e);for(const t of n.observedAttributes){const s=e.getAttribute(t);s&&n.prototype.attributeChangedCallback.call(e,t,null,s)}}else r.has(e)||c(e,i)},l=t=>{for(const e of t.querySelectorAll(".ascii-grid"))i(e)},d=t=>(h.observe(t,{childList:!0,subtree:!0}),t),h=new MutationObserver((t=>{for(const{addedNodes:e}of t)for(const t of e)t.nodeType===s&&(t.classList.contains("ascii-grid")&&i(t),l(t))}));l(d(document));const{attachShadow:p}=Element.prototype;Element.prototype.attachShadow=function(){return d(p.apply(this,arguments))}}export{t as default};
