/*! (c) Andrea Giammarchi */
const{max:t,min:e}=Math,{fromCharCode:s}=String,a=a=>{let o=0,r=1/0;const n=[];for(const c of(t=>{let e=0;const a=new Map;return t.replace(/\S+/g,(t=>{if(!a.has(t)){let o="";do{o=s(e++)}while(/[\r\n\t ]/.test(o));a.set(t,o)}return a.get(t)}))})(a).split(/[\r\n]+/)){const s=c.trimEnd().length;s&&(o=t(o,s),r=e(r,c.length-c.trimStart().length),n.push(c))}return n.map((t=>t.slice(r).padEnd(o-r))).join("\n")};var o=t=>{let e="",s=[];const o=[s];for(const r of a(t))switch(r){case" ":case"\t":r===e?(e="",s.push(".")):e=r;break;case"\n":o.push(s=[]);break;default:e=r,s.push("g"+r.charCodeAt(0))}const r=o.flat().filter((t=>"."!==t));return t=o.map((t=>`"${t.join(" ")}"`)).join(" "),{applyTo(e){let s=0;const a=new Map,{children:o,style:n}=e;n.display="grid",n["grid-template-areas"]=t;for(const t of r)if(!a.has(t)){const e=o[s++];e.style["grid-area"]=t,a.set(t,e)}return e},cssFor(e){let s=0;const a=new Set,o=[`${e}{display:grid;grid-template-areas:${t}}`];for(const t of r)a.has(t)||(o.push(`${e}>*:nth-child(${++s}){grid-area:${t}}`),a.add(t));return o.join("\n")}}};if(!customElements.get("ascii-grid")){const{COMMENT_NODE:t,ELEMENT_NODE:e}=Node,{find:s}=Array.prototype,a=e=>e.nodeType===t&&e.data.startsWith("#"),r=new WeakMap,n=(t,e)=>{const o=new MutationObserver((()=>{s.call(t.childNodes,a)&&(o.disconnect(),r.delete(t),e.call(t,t))}));o.observe(t,{childList:!0}),r.set(t,o)};class c extends HTMLElement{#t;static observedAttributes=["cols","rows"];attributeChangedCallback(t,e,s){switch(t){case"cols":this.style["grid-template-columns"]=s;break;case"rows":this.style["grid-template-rows"]=s}}get structure(){const t=s.call(this.childNodes,a);return t?t.data.slice(1):""}set structure(t){let e=s.call(this.childNodes,a);e||(e=this.appendChild(document.createComment(""))),e.data="#"+t,o(t).applyTo(this)}connectedCallback(){const{structure:t}=this;t?this.structure=t:r.has(this)||n(this,this.connectedCallback)}}customElements.define("ascii-grid",c);const i=t=>{const e=s.call(t.childNodes,a);if(e){o(e.data.slice(1)).applyTo(t);for(const e of c.observedAttributes){const s=t.getAttribute(e);s&&c.prototype.attributeChangedCallback.call(t,e,null,s)}}else r.has(t)||n(t,i)},l=t=>{for(const e of t.querySelectorAll(".ascii-grid"))i(e)},d=t=>(h.observe(t,{childList:!0,subtree:!0}),t),h=new MutationObserver((t=>{for(const{addedNodes:s}of t)for(const t of s)t.nodeType===e&&(t.classList.contains("ascii-grid")&&i(t),l(t))}));l(d(document));const{attachShadow:p}=Element.prototype;Element.prototype.attachShadow=function(){return d(p.apply(this,arguments))}}export{o as default};
